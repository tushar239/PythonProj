IMPORTANT:

correlation works only between numerical variables
    data2.corr(method="pearson", numeric_only=True)

For categorical variable, following things are useful

    - value_count - shows frequencies. It can be used for both numerical and categorical variables.

                seller_frequency = cars['seller'].value_counts()

    - crosstab - can be used for a single categorical variable to see frequencies or to see the frequencies by showing the relation between two categorical variables

                seller_crosstab = pd.crosstab(cars['seller'],
                                  columns='count',
                                  normalize=True)
                jobtype_salstat = pd.crosstab(index = data2['JobType'], # index means row
                     columns = data2['SalStat'],
                     margins = True,
                     normalize = 'index').round(4)*100 # index means row. normalize = 'index' means you will get row proportion sum = 1

    - sns.countplot - it is used to see frequencies. Categorical variable on x-axis, y-axis will be frequency(count). You can add hue='another categorical variable'.

                sns.countplot(data=data2, x='JobType')
                This will show the frequencies of different JobType

                sns.countplot(data=data2, x='JobType', hue='SalStat')
                This will show the frequency of SalStat for every JobType

                plt.bar(...) can also be used in place of sns.countplot(), but it is not so convinient.

    - sns.boxplot - can be used just for a numeric variable or for comparing a categorical variable with a numerical variable.
                shows min, median, max, 25%(first quartile), 50%(second quartile), 75% analysis(third quartile), like describe() method

                sns.boxplot(data=cars_data, y="Price")
                This will show 5-pointer summary of Price

                sns.boxplot(data=data2, x='SalStat', y='age')
                sns.boxplot(data=cars_data, y="Price", x="FuelType")
                This will show 5-pointer summary of Price for every FuelType

                sns.boxplot(data=cars_data, y="Price", x="FuelType", hue="Automatic")
                This will show 5-pointer summary of Price for every FuelType. And 5-point summary for every Automatic within FuelType

    - sns.barplot - can be used for comparing a categorical variable with a numeric variable with hue='another categorical variable'
                sns.barplot(x='JobType', y='age', hue='SalStat', data=data2)
                sns.barplot() is different than plt.barplot()

                It can also be understood as a visualization of the group by action.

For numerical variable, following things are useful
    Use describe() to see mean and median for numerical variable. If mean and median are closer, you have good data.
    Otherwise, there are outliers. you should find them and remove them.

    - plt.histplot/sns.displot - shows frequency distribution
                                sns.displot(data2['capitalgain'], bins=10, kde=False)

    - sns.boxplot - can be used just for a numeric variable(on y-axis) or can be used for comparing a categorical variable with a numerical variable.
                shows min, median, max, 25%(first quartile), 50%(second quartile), 75% analysis(third quartile), like describe() method

                sns.boxplot(y=cars['price'])
                same as price_summary=cars['price'].describe()

                sns.boxplot(data=data2, x='SalStat', y='age')

    - sns.regplot (same as scatterplot with or without regression line) - to compare two numerical variables
    - plt.scatterplot - to compare two numerical variables. you can use it before and after dropping outliers to see whether they are dropped properly.
                        plt.scatter(x=cars['yearOfRegistration'], y=cars['price'], c='blue')
                        or
                        sns.regplot(x='yearOfRegistration', y='price', scatter=True, fit_reg=False, data=cars)
                        fit_reg=False means you don't want a regression line in the plot

Alternative of boxplot

    sns.boxplot(data=data2, x='SalStat', y='age')
    plt.show()

    five_numbers_summary_of_age = data2['age'].describe()
    describe() gives you 5 pointer analysis of one column.

    If you have boxplot comparing two variables, you can use groupby as an alternative.

    To get exact value by comparing two variables, you can use dataframe.groupby(x axis variable)[y-axis variable].median()
    exact_median_of_age_by_salarystatus = data2.groupby('SalStat')['age'].median()