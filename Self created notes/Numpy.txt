Numpy - numerical python

Python List vs Numpy Array
https://www.geeksforgeeks.org/python-lists-vs-numpy-arrays/

Python List is like a LinkedList.
Numpy array ls like an ArrayList

Element Overhead: Lists in Python store additional information about each element, such as its type and reference count. This overhead can be significant when dealing with a large number of elements.
Datatype: Lists can hold different data types, but this can decrease memory efficiency and slow numerical operations.
Memory Fragmentation: Lists may not store elements in contiguous memory locations, causing memory fragmentation and inefficiency.
Performance: Lists are not optimized for numerical computations and may have slower mathematical operations due to Pythonâ€™s interpretation overhead. They are generally used as general-purpose data structures.
Functionality: Lists can store any data type, but lack specialized NumPy functions for numerical operations.

----------------Creating array------------------

Create an empty array filled up with 0s
empa = np.empty((3, 4), dtype=int)

create full array filled up with 55
flla = np.full([3, 3], 55, dtype=int)

# create empty array with None value
matrix = np.empty(shape=(2, 5), dtype='object')

# create empty array with NaN value
a = np.full([3,3], np.nan)
or
a = np.full([3,3], 0)
a.fill(np.nan)

Creating array from list : array = np.array([2, 3, 4, 5]) :  [2, 3, 4, 5]
Creating array from tuple : array = np.array((2, 3, 4, 5)) : [2, 3, 4, 5]

If one element is a string, it converts all others to string also
array = np.array([2, 3, "hi", 5]) : ['2' '3' 'hi' '5']
array = np.array([2, 3, "hi", Child()]) : ['2' '3' 'hi']  Child instance is going to be garbage collected

-----------------linspace and arange-----------------
linspace - returns an array of evenly spaced values within the specified interval [start, stop]
same as arange, function but instead of a step, it uses a sample number.

array = np.linspace(start=1, stop=10, num=5, endpoint=False, dtype=float, retstep=True)
array = np.arange(start=1, stop=5, step=.5)

array = np.arange(11, 20, 1)
creates an array from 11 to 19

array = np.arange(11, 20, 1).reshape(3,3)
arranges an array in 3 x 3 array

----- ones, zeros, random.rand, random.randint, logspace, random.choice  --------

ones - returns N-D array of 1s
array = np.ones((5, 4), int)
it returns 2D array of 5 rows and 4 cols filled with 1s

array = np.ones((5, 4, 2), int)
it returns 3D array of 5 rows, 4 cols , in that each cell has 2 elements. 1s are filled up as ints

array = np.zeros((5, 4))
it returns 2D array of 5 rows and 4 columns filled with 0s

array = np.random.rand(5, 3)
it returns 2D array of 5 rows and 3 columns filled with random numbers between 0 and 1

array = np.random.rand(5, 3, 2)
it returns 3D array filled with random numbers between 0 and 1

array = np.random.randint(low=0, high=3, size=5)
it returns 1D array of size 5 with random numbers between 0 and 2

array = np.random.randint(low=-3, high=10, size=(2, 3))
it returns 2D array of size (2,3) with random numbers between -3 and 9

array = np.logspace(start=1, stop=10, num=5, endpoint=True, base=10.0, dtype=float)
returns equally spaced numbers based on log scale

np.random.choice(10, 15)
returns 15 random samples in 1D array from 0 to 9

----- add, multiply, append, delete, insert -----
result = np.add(a,b)
addition of two arrays a and b. creates third array 'result'

result = np.multiply(a, b)
multiplies two arrays

a = np.array([[1,2,3], [4,5,6], [7,8,9]])
b = np.append(a, [[10,11,14]], axis=0)
appends a new row or column to an array 'a'.
axis=0 means row. axis=1 means column

c = np.array([10,11,14]).reshape(3, 1)
d = np.append(a, c, axis=1)
appends a column to array 'a'

b = np.delete(a, 1, axis=0)
deletes a row from index# 1 from an array 'a'

b = np.delete(a, 1, axis=1)
deletes col frp, index# 1 from an array 'a'

a = np.array([[1,2,3], [4,5,6], [7,8,9]])
b = np.insert(a, 1, [10,11,12], axis=0)
inserts a row at index# 1

b = np.insert(a, 1, [10,11,12], axis=1)
inserts a col at index# 1

--- iterate an array ---
for i in np.arange(start=0, stop=array.size, step=1, dtype=int):
    print(str(array[i]))


indices = range(0, array.size, 1)
for i in indices:
    print(str(array[i]))

--- accessing(slicing) --------
a = np.array([[1,2,3], [4,5,6], [7,8,9]])
print(a[0][1])
print(a[0,1])

syntax for 1D array - array[start : stop : step]
syntax for 2D array - array[row start : row stop : row step, col start : col stop : col step]

subArray = a[1:3]
subArray = a[::2]
subArray = a[1:3, 0:2]

--- reshape, shape -------
array = np.arange(1, 10, 1).reshape((3,3))
print(array.shape)  # returns a tuple with number of rows and cols - (3, 3)
print(array.shape[0])  # gives number of rows - 3
print(array.shape[1])  # gives number of cols - 3
