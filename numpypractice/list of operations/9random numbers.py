import numpy as np
'''
np.random.rand(3, 2)    # uniform [0, 1)
np.random.randn(300)      # normal distribution
or 
np.random.normal(loc=0, scale=1, size=300) 
np.random.randint(1, 10, (2, 2))  # random integers
'''
a = np.random.rand(3, 2) # 3x2 array of numbers between 0 and 1, 1 exclusive
print(a)
'''
[[0.90325445 0.05688066]
 [0.58247387 0.72001365]
 [0.70374415 0.26457612]]
'''
'''
random.randn(d0, d1, ..., dn)
Return a sample (or samples) from the “standard normal” distribution.
generates an array of shape (d0, d1, ..., dn), filled with 
random floats sampled from a univariate “normal” (Gaussian) distribution of mean 0 and variance 1. 

A single float randomly sampled from the distribution is returned if no argument is provided.
'''
a = np.random.randn(300)
print(a)
'''
[-0.5349597  -0.04598684 -0.4552757  -0.05559329  0.61642794  0.70750912
 -0.61527149  0.7149446  -0.77037798  0.32102722  1.69407618 -0.78705131
  1.70306679  1.85949993 -1.20655686 -0.65854797  1.48848001 -0.10403715
 -1.48397624 -0.73631384 -0.69000783  1.21954445 -0.52826374 -0.86633825
  0.05082826 -0.63310893  0.22597083  1.15236892  0.10294349 -0.31114213
  1.40668227 -2.08440252  0.00750325  0.13057824 -0.64957305  0.62338286
 -1.75069947 -0.32967924  0.33902599 -0.94094051  0.31301413  2.60477116
 -1.13821834  0.01157057 -0.58173689 -1.40709371 -0.10234694 -1.61148516
  1.25297217 -0.62749906  1.86070725  0.59988145 -2.0665135  -2.31632312
 -2.25788665  0.03601914 -0.40629977 -0.68301311 -0.2814076   0.94710825
 -1.43387836  0.08645444  0.68246346  0.36564235 -0.87987396  1.17229517
  0.82651227 -0.67123998  2.26051022 -0.84855045  0.03682495  0.37169634
  0.2858122  -0.97202449  0.34520161 -1.1441229  -1.80975775  0.84495698
 -1.73454507  0.20668031 -2.40567525 -0.2185817   0.55606309 -0.84795118
 -0.52701399  0.70440133  0.27810276 -2.00037345 -0.482195    1.13577636
  0.80250756 -1.27572806 -0.50941429  0.29951269 -0.80811526  0.2091831
 -0.63616976 -1.604734   -0.33139933 -0.51522548 -1.25889495 -0.32510898
  0.54511695 -0.79612456 -1.00667098  1.76251623 -1.94155485 -1.37947829
  0.42080046  0.97095889  1.79472292 -1.38701395 -0.29984221  1.1150145
  0.99048224 -0.56512199 -0.05068661  1.60257909 -0.21490799 -0.17011113
 -1.51298801 -1.63361723  2.33655389 -0.86321134  0.41103019 -0.30794067
  1.15791429 -0.50073208 -0.39795885 -0.85379094 -2.56763848  0.78681859
  0.52750666 -1.57581793  0.16644994  0.90270778  0.13816591  1.10711306
 -2.28358895 -0.55361721 -1.22281149  0.180509    0.62366898 -0.55225677
  0.84889955 -0.95112668  0.39285655  0.61948471 -0.68869116 -0.22447855
 -0.47778556 -0.26064054 -0.89511824  0.93133866  1.94961645 -0.67826944
  1.07428155  0.8219467  -0.26224118 -2.42122651  0.79326752  0.92729443
 -1.23072379 -0.54581649 -0.28732901  0.29917803  0.25060386  0.2985957
 -1.27558988  1.16029755 -0.31680238  0.48784164 -0.26386961 -0.95842073
  1.08301357 -0.59397422 -1.71024943 -0.30907587  1.26806042 -0.23364814
 -0.03419334 -1.4242219   0.61569621  1.87295775  0.1644162   0.35218849
 -0.67525555 -0.21639741 -0.31511005  0.1408815   0.75675392  0.64140515
  0.04834229 -1.09286517 -0.20661176 -0.21413144  1.08874051  0.01680115
  0.39672496 -1.38094027  1.65348574 -0.34833434 -0.28917854 -0.2117918
 -0.39573536  0.64038569  0.24901632 -0.61906602 -0.6713449   0.54641902
  0.1853067   1.75652976  0.33581144 -1.22619014  1.42805734 -0.00336473
  0.5640018  -0.63540796 -0.84499507 -0.36137957 -1.01944824  0.73724238
  1.33852224 -0.56274178 -1.61137183 -0.51501705  3.13222806  0.57971217
 -0.45264442  0.07037573 -1.45965634 -0.60071716 -2.36252892  0.38960993
 -0.11967814  0.71817157  0.40236075 -1.1179713  -0.58770421  0.32671391
 -1.56176483 -1.39601956 -1.40568491  0.73504825 -0.8733363  -1.61842377
  0.03503642  0.03045234 -0.63325072  0.34113118  0.46778079  1.15934516
 -1.28890706 -0.01295999  0.50796317 -0.93973276  1.59854748 -0.84633002
  0.37539835  0.96820328 -0.2689143  -0.285514    0.31616845 -0.08865518
 -0.37810351  0.2337246   0.06235699 -1.02065247 -1.00575887  0.21941816
 -1.0602131  -0.20211541  1.73485354  1.64408123  2.0840321  -1.34874017
 -1.27729976 -0.53901298  1.63596777 -0.6366285  -2.16916788  1.88241305
 -1.60339348 -0.64492986  0.58156201  0.5006227  -0.00396394  0.06649865
  1.62512894 -2.16373223  1.39224911  1.24787621  0.38666568 -0.99561593
  0.31368935 -1.28045974 -0.36771251  0.94226971  0.57953691 -0.68885427]
'''

import seaborn as sns
import matplotlib.pyplot as plt
sns.histplot(a, kde=True, bins=30)  # newer version; distplot is deprecated
plt.title("Distribution Plot with KDE")
plt.show()

# loc - mean
# scale - standard deviation
# size - total number of records
a = np.random.normal(loc=0, scale=1, size=300)

sns.histplot(a, kde=True, bins=30)  # newer version; distplot is deprecated
plt.title("Distribution Plot with KDE")
plt.show()
